
TARGET_PLATFORM = android-24
LINKSTL = shared
HAS_NEON = yes



TOOLCHAIN_ARCH	?= arm # arm | x86 | x86_64
# LINKSTL		?= static
# HAS_NEON	?= no

NDK_ROOT	?= $(HOME)/android/22.1.7171670
HOST_OS		?= linux	# windows | darwin
HOST_ARCH	?= x86_64	# x86 | x86_64 | ppc
HOST_EXEEXT	?=		# none | .exe

HOST_OS_BASE	= $(HOST_OS)
HOST_TAG	= $(HOST_OS_BASE)-$(HOST_ARCH)
ANDROID_GCC	?= 4.6

ifeq ($(TOOLCHAIN_ARCH),x86)
TOOLCHAIN_ABI	?= x86 # armeabi | armeabi-v7a | x86
CCPREFIX	?= i686-linux-android-
else
TOOLCHAIN_ABI	?= armeabi-v7a # armeabi | armeabi-v7a | x86
CCPREFIX	?= arm-linux-androideabi-
endif
CC		= $(CCPREFIX)clang
CXX		= $(CCPREFIX)clang++
SYSROOT		= $(NDK_ROOT)/platforms/$(TARGET_PLATFORM)/arch-$(TOOLCHAIN_ARCH)

ABI_CFLAGS	=
ABI_LDFLAGS	=

ANDROID_LIBPATH	= $(NDK_ROOT)/platforms/$(TARGET_PLATFORM)/arch-$(TOOLCHAIN_ARCH)/usr/lib
ANDROID_CFLAGS	=

ifeq ($(LINKSTL),shared)
	#APP_STL = stlport_shared
	#ANDROID_STLLIB = $(NDK_ROOT)/sources/cxx-stl/stlport/libs/armeabi/libstlport_shared.so
	APP_STL = gnustl_shared
	ANDROID_STLLIB = $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/libs/$(TOOLCHAIN_ABI)/libgnustl_shared.so
else
	#APP_STL = stlport_static
	#ANDROID_STLLIB = $(NDK_ROOT)/sources/cxx-stl/stlport/libs/armeabi/libstlport_static.a
	APP_STL = gnustl_static
	ANDROID_STLLIB = $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/libs/$(TOOLCHAIN_ABI)/libgnustl_static.a \
		$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/libs/$(TOOLCHAIN_ABI)/libsupc++.a
endif

ifeq ($(TOOLCHAIN_ARCH),armeabi-v7a)
	ABI_CFLAGS	+= -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__
	ABI_CFLAGS	+= -march=armv7-a -mfloat-abi=softfp
	ABI_LDFLAGS	+= -Wl,--fix-cortex-a8
	ifeq ($(HAS_NEON),yes)
		ABI_CFLAGS	+= -mfpu=neon
	else
		ABI_CFLAGS	+= -mfpu=vfp
	endif
endif
ifeq ($(TOOLCHAIN_ARCH),armeabi)
	ABI_CFLAGS	+= -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__
	ABI_CFLAGS	+= -march=armv5te -mtune=xscale -msoft-float
endif

ANDROID_CFLAGS	= -fpic -ffunction-sections -funwind-tables -fstack-protector \
		$(ABI_CFLAGS) \
		-O2 -fomit-frame-pointer -fno-strict-aliasing -funswitch-loops -finline-limit=300 \
		-I$(NDK_ROOT)/platforms/$(TARGET_PLATFORM)/arch-$(TOOLCHAIN_ARCH)/usr/include \
		-I$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/include \
		-I$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/libs/$(TOOLCHAIN_ABI)/include \
		-DANDROID -D_FILE_OFFSET_BITS=64 -Wa,--noexecstack -O2 -DNDEBUG \
		--sysroot="$(SYSROOT)"
# XXX: use gnustl_shared instead of stlport_shared
#		-I$(NDK_ROOT)/sources/cxx-stl/stlport/stlport \
#		-I$(NDK_ROOT)/sources/cxx-stl/gabi++/include \

ANDROID_CXXFLAGS =  $(ANDROID_CFLAGS) \
		-I$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/include \
		-I$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(ANDROID_GCC)/libs/$(TOOLCHAIN_ABI)/include
#		-frtti -fexceptions \

ANDROID_LDFLAGS	= -L$(ANDROID_LIBPATH) \
		--sysroot="$(SYSROOT)" \
		-Wl,--gc-sections -Wl,-z,nocopyreloc \
		--sysroot=$(NDK_ROOT)/platforms/$(TARGET_PLATFORM)/arch-$(TOOLCHAIN_ARCH) \
		$(ABI_LDFLAGS) \
		-Wl,--no-undefined \
		-Wl,-z,noexecstack -Wl,-z,relro -Wl,-z,now \
		-lc -lm -llog -lstdc++ $(ANDROID_STLLIB)





CROSS_COMPILE=		$(CCPREFIX)
COMPILE_OPTS =		$(INCLUDES) -I. -O2 -DSOCKLEN_T=socklen_t -DNO_SSTREAM=1 -D_LARGEFILE_SOURCE=1 -DLOCALE_NOT_USED -DXLOCALE_NOT_USED $(ANDROID_CFLAGS)
C =			c
C_COMPILER =		$(CROSS_COMPILE)gcc
C_FLAGS =		$(COMPILE_OPTS)
CPP =			cpp
CPLUSPLUS_COMPILER =	$(CROSS_COMPILE)g++
CPLUSPLUS_FLAGS =	$(COMPILE_OPTS) -Wall -DBSD=1 $(ANDROID_CFLAGS)
OBJ =			o
LINK =			$(CROSS_COMPILE)g++ -o
LINK_OPTS =		
CONSOLE_LINK_OPTS =	$(LINK_OPTS) $(ANDROID_LDFLAGS)
LIBRARY_LINK =		$(CROSS_COMPILE)ar cr 
LIBRARY_LINK_OPTS =	$(LINK_OPTS)
LIB_SUFFIX =			a
LIBS_FOR_CONSOLE_APPLICATION =
LIBS_FOR_GUI_APPLICATION =
EXE =
